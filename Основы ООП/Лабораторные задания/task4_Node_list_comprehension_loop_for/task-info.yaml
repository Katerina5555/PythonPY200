type: output
files:
- name: tests/output.txt
  visible: false
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 544
    length: 85
    placeholder_text: '...  # TODO с помощью list comprehension сделать список узлов
      со значениями от 0 до 9'
    initial_state:
      length: 85
      offset: 544
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '[Node(value) for value in range(10)]'
  - offset: 657
    length: 33
    placeholder_text: '# TODO распечатать значения узлов'
    initial_state:
      length: 33
      offset: 657
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      for node in list_nodes:
              print(node.value)
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value
            self.next = next_

        def __repr__(self) -> str:
            return f"Node({self.value}, {self.next})"


    if __name__ == "__main__":
        list_nodes = ...  # TODO с помощью list comprehension сделать список узлов со значениями от 0 до 9
        print(list_nodes)

        # TODO распечатать значения узлов
  learner_created: false
status: Unchecked
record: -1
